//
// RUN: gluc %s -o %t && %t | FileCheck -v %s
//

import std::{intToString, stringReplace, stringTrim, stringToUpper, stringToLower, stringReverse, stringContains, stringIndexOf, stringLastIndexOf, stringSlice, stringSubstring, stringCompare, stringToInt};

func test_intToString() -> Void {
    std::print(intToString(1)); // CHECK: 1
    std::print(intToString(-1)); // CHECK: -1

    std::print(intToString(13)); // CHECK: 13
    std::print(intToString(-13)); // CHECK: -13

    std::print(intToString(123)); // CHECK: 123
    std::print(intToString(-456)); // CHECK: -456

    std::print(intToString(0)); // CHECK: 0

    // Additstdnal test cases
    std::print(intToString(9)); // CHECK: 9
    std::print(intToString(-9)); // CHECK: -9
    std::print(intToString(10)); // CHECK: 10
    std::print(intToString(-10)); // CHECK: -10
    std::print(intToString(99)); // CHECK: 99
    std::print(intToString(-99)); // CHECK: -99
    std::print(intToString(100)); // CHECK: 100
    std::print(intToString(-100)); // CHECK: -100
    std::print(intToString(999)); // CHECK: 999
    std::print(intToString(-999)); // CHECK: -999
    std::print(intToString(1000)); // CHECK: 1000
    std::print(intToString(-1000)); // CHECK: -1000
    std::print(intToString(12345)); // CHECK: 12345
    std::print(intToString(-12345)); // CHECK: -12345
    std::print(intToString(999999)); // CHECK: 999999
    std::print(intToString(-999999)); // CHECK: -999999
}

func test_stringReplace() -> Void {
    // Basic replacement
    std::print(stringReplace("Hello World", "World", "GLU"));

    // Multiple replacements
    std::print(stringReplace("aaa", "a", "bb")); // CHECK: bbbbbb

    // No match
    std::print(stringReplace("test", "xyz", "abc")); // CHECK: test

    // Replace with empty string
    std::print(stringReplace("Hello World", " World", "")); // CHECK: Hello

    // Replace empty string (should return original)
    std::print(stringReplace("test", "", "abc")); // CHECK: test

    // Replace entire string
    std::print(stringReplace("old", "old", "new")); // CHECK: new

    // Overlapping patterns
    std::print(stringReplace("ababab", "ab", "x")); // CHECK: xxx

    // Additstdnal comprehensive test cases
    std::print(stringReplace("The quick brown fox jumps over the lazy dog", "the", "THE")); // CHECK: The quick brown fox jumps over THE lazy dog

    std::print(stringReplace("aabbccaabbcc", "bb", "XX")); // CHECK: aaXXccaaXXcc

    std::print(stringReplace("hello hello hello", "hello", "hi")); // CHECK: hi hi hi

    std::print(stringReplace("123456789", "456", "XXX")); // CHECK: 123XXX789

    std::print(stringReplace("abcdefghijklmnop", "def", "")); // CHECK: abcghijklmnop

    std::print(stringReplace("AAAAAAA", "AA", "B")); // CHECK: BBBA

    std::print(stringReplace("replace all spaces", " ", "_")); // CHECK: replace_all_spaces

    std::print(stringReplace("!!!!!", "!", "?")); // CHECK: ?????

    std::print(stringReplace("case sensitive Test", "test", "TEST")); // CHECK: case sensitive Test

    std::print(stringReplace("single", "single", "multiple words here")); // CHECK: multiple words here
}

func test_stringTrim() -> Void {
    // Basic whitespace trimming
    std::print(stringTrim("  hello world  ")); // CHECK: hello world

    // Only leading whitespace
    std::print(stringTrim("   test")); // CHECK: test

    // Only trailing whitespace
    std::print(stringTrim("test   ")); // CHECK: test

    // No whitespace to trim
    std::print(stringTrim("nowhitespace")); // CHECK: nowhitespace

    // Only whitespace
    std::print(stringTrim("   ")); // CHECK: {{^ {0}$}}

    // Empty string
    std::print(stringTrim("")); // CHECK: {{^ {0}$}}

    // Single character with whitespace
    std::print(stringTrim(" a ")); // CHECK: a

    // Additstdnal comprehensive test cases
    std::print(stringTrim("\t\t\thello\t\t\t")); // CHECK: hello

    std::print(stringTrim("\n\n\nworld\n\n\n")); // CHECK: world

    std::print(stringTrim(" \t\n mixed whitespace \t\n ")); // CHECK: mixed whitespace

    std::print(stringTrim("no trim needed")); // CHECK: no trim needed

    std::print(stringTrim("   multiple   spaces   inside   ")); // CHECK: multiple   spaces   inside

    std::print(stringTrim(" \t\n ")); // CHECK: {{^ {0}$}}

    std::print(stringTrim("a")); // CHECK: a

    std::print(stringTrim(" abc def ghi ")); // CHECK: abc def ghi

    std::print(stringTrim("\ttab at start")); // CHECK: tab at start

    std::print(stringTrim("newline at end\n")); // CHECK: newline at end
}

func test_stringToUpper() -> Void {
    // Basic lowercase to uppercase
    std::print(stringToUpper("hello world")); // CHECK: HELLO WORLD

    // Mixed case
    std::print(stringToUpper("Hello World")); // CHECK: HELLO WORLD

    // Already uppercase
    std::print(stringToUpper("ALREADY UPPER")); // CHECK: ALREADY UPPER

    // Numbers and symbols (should remain unchanged)
    std::print(stringToUpper("hello123!@#")); // CHECK: HELLO123!@#

    // Empty string
    std::print(stringToUpper("")); // CHECK: {{^ {0}$}}

    // Single character lowercase
    std::print(stringToUpper("a")); // CHECK: A

    // Single character uppercase
    std::print(stringToUpper("Z")); // CHECK: Z

    // Only numbers
    std::print(stringToUpper("12345")); // CHECK: 12345

    // Additstdnal comprehensive test cases
    std::print(stringToUpper("abcdefghijklmnopqrstuvwxyz")); // CHECK: ABCDEFGHIJKLMNOPQRSTUVWXYZ

    std::print(stringToUpper("the Quick BROWN fox")); // CHECK: THE QUICK BROWN FOX

    std::print(stringToUpper("123abc456def789")); // CHECK: 123ABC456DEF789

    std::print(stringToUpper("special!@#$%characters")); // CHECK: SPECIAL!@#$%CHARACTERS

    std::print(stringToUpper("single_word")); // CHECK: SINGLE_WORD

    std::print(stringToUpper("MiXeD cAsE tExT")); // CHECK: MIXED CASE TEXT

    std::print(stringToUpper("test with spaces")); // CHECK: TEST WITH SPACES

    std::print(stringToUpper("punctuation, marks. everywhere!")); // CHECK: PUNCTUATION, MARKS. EVERYWHERE!
}

func test_stringToLower() -> Void {
    // Basic uppercase to lowercase
    std::print(stringToLower("HELLO WORLD")); // CHECK: hello world

    // Mixed case
    std::print(stringToLower("Hello World")); // CHECK: hello world

    // Already lowercase
    std::print(stringToLower("already lower")); // CHECK: already lower

    // Numbers and symbols (should remain unchanged)
    std::print(stringToLower("HELLO123!@#")); // CHECK: hello123!@#

    // Empty string
    std::print(stringToLower("")); // CHECK: {{^ {0}$}}

    // Single character uppercase
    std::print(stringToLower("A")); // CHECK: a

    // Single character lowercase
    std::print(stringToLower("z")); // CHECK: z

    // Only numbers
    std::print(stringToLower("12345")); // CHECK: 12345

    // Additstdnal comprehensive test cases
    std::print(stringToLower("ABCDEFGHIJKLMNOPQRSTUVWXYZ")); // CHECK: abcdefghijklmnopqrstuvwxyz

    std::print(stringToLower("THE Quick brown FOX")); // CHECK: the quick brown fox

    std::print(stringToLower("123ABC456DEF789")); // CHECK: 123abc456def789

    std::print(stringToLower("SPECIAL!@#$%CHARACTERS")); // CHECK: special!@#$%characters

    std::print(stringToLower("SINGLE_WORD")); // CHECK: single_word

    std::print(stringToLower("MiXeD CaSe TeXt")); // CHECK: mixed case text

    std::print(stringToLower("TEST WITH SPACES")); // CHECK: test with spaces

    std::print(stringToLower("PUNCTUATstdN, MARKS. EVERYWHERE!")); // CHECK: punctuatstdn, marks. everywhere!
}

func test_stringReverse() -> Void {
    // Basic string reversal
    std::print(stringReverse("hello")); // CHECK: olleh

    // Palindrome
    std::print(stringReverse("racecar")); // CHECK: racecar

    // Empty string
    std::print(stringReverse("")); // CHECK: {{^ {0}$}}

    // Single character
    std::print(stringReverse("a")); // CHECK: a

    // Numbers and symbols
    std::print(stringReverse("123!@#")); // CHECK: #@!321

    // Words with spaces
    std::print(stringReverse("hello world")); // CHECK: dlrow olleh

    // Mixed case
    std::print(stringReverse("AbCdEf")); // CHECK: fEdCbA

    // Long string
    std::print(stringReverse("abcdefghijklmnop")); // CHECK: ponmlkjihgfedcba

    // Additstdnal comprehensive test cases
    std::print(stringReverse("12345")); // CHECK: 54321

    std::print(stringReverse("The Quick Brown Fox")); // CHECK: xoF nworB kciuQ ehT

    std::print(stringReverse("!@#$%^&*()")); // CHECK: )(*&^%$#@!

    std::print(stringReverse("abcdefg")); // CHECK: gfedcba

    std::print(stringReverse("AaAaAa")); // CHECK: aAaAaA

    std::print(stringReverse("   spaces   ")); // CHECK: {{^   secaps   $}}

    std::print(stringReverse("123abc456def")); // CHECK: fed654cba321

    std::print(stringReverse("madam")); // CHECK: madam

    std::print(stringReverse("abcdefghijklmnopqrstuvwxyz")); // CHECK: zyxwvutsrqponmlkjihgfedcba
}

func test_stringContains() -> Void {
    // Basic substring search
    std::print(stringContains("hello world", "world")); // CHECK: true

    // Substring not found
    std::print(stringContains("hello world", "xyz")); // CHECK: false

    // Empty substring (should return true)
    std::print(stringContains("test", "")); // CHECK: true

    // Substring longer than string
    std::print(stringContains("hi", "hello")); // CHECK: false

    // Exact match
    std::print(stringContains("test", "test")); // CHECK: true

    // Case sensitive
    std::print(stringContains("Hello World", "hello")); // CHECK: false

    // Multiple occurrences
    std::print(stringContains("ababab", "ab")); // CHECK: true

    // Single character search
    std::print(stringContains("abcdef", "c")); // CHECK: true

    // Single character not found
    std::print(stringContains("abcdef", "z")); // CHECK: false

    // Empty string search
    std::print(stringContains("", "test")); // CHECK: false

    // Empty string with empty substring
    std::print(stringContains("", "")); // CHECK: true

    // Additstdnal test cases
    std::print(stringContains("The quick brown fox jumps over the lazy dog", "fox")); // CHECK: true

    std::print(stringContains("The quick brown fox jumps over the lazy dog", "cat")); // CHECK: false

    std::print(stringContains("programming", "gram")); // CHECK: true

    std::print(stringContains("123456789", "456")); // CHECK: true
}

func test_stringIndexOf() -> Void {
    // Basic substring search
    std::print(stringIndexOf("hello world", "world")); // CHECK: 6

    // Substring not found
    std::print(stringIndexOf("hello world", "xyz")); // CHECK: -1

    // Empty substring (should return 0)
    std::print(stringIndexOf("test", "")); // CHECK: 0

    // Substring longer than string
    std::print(stringIndexOf("hi", "hello")); // CHECK: -1

    // Exact match
    std::print(stringIndexOf("test", "test")); // CHECK: 0

    // Case sensitive
    std::print(stringIndexOf("Hello World", "hello")); // CHECK: -1

    // Multiple occurrences (should return first)
    std::print(stringIndexOf("ababab", "ab")); // CHECK: 0

    // Single character search
    std::print(stringIndexOf("abcdef", "c")); // CHECK: 2

    // Single character not found
    std::print(stringIndexOf("abcdef", "z")); // CHECK: -1

    // Empty string search
    std::print(stringIndexOf("", "test")); // CHECK: -1

    // Empty string with empty substring
    std::print(stringIndexOf("", "")); // CHECK: 0

    // Substring at the end
    std::print(stringIndexOf("hello world", "ld")); // CHECK: 9

    // Substring at the beginning
    std::print(stringIndexOf("hello world", "hello")); // CHECK: 0

    // Additstdnal comprehensive test cases
    std::print(stringIndexOf("banana", "ana")); // CHECK: 1

    std::print(stringIndexOf("programming", "gram")); // CHECK: 3

    std::print(stringIndexOf("123456789", "456")); // CHECK: 3

    std::print(stringIndexOf("special!@#$%", "@#")); // CHECK: 8

    std::print(stringIndexOf("repeatedrepeated", "repeated")); // CHECK: 0

    std::print(stringIndexOf("whitespace test", " ")); // CHECK: 10

    std::print(stringIndexOf("overlapping", "lapping")); // CHECK: 4

    std::print(stringIndexOf("singlechar", "h")); // CHECK: 7

    std::print(stringIndexOf("endingpattern", "pattern")); // CHECK: 6

    std::print(stringIndexOf("a", "a")); // CHECK: 0

    std::print(stringIndexOf("nested_nested", "nested")); // CHECK: 0

    std::print(stringIndexOf("find_this_substring", "this")); // CHECK: 5
}

func test_stringLastIndexOf() -> Void {
    // Basic substring search (should find last occurrence)
    std::print(stringLastIndexOf("hello world hello", "hello")); // CHECK: 12

    // Substring not found
    std::print(stringLastIndexOf("hello world", "xyz")); // CHECK: -1

    // Empty substring (should return string length)
    std::print(stringLastIndexOf("test", "")); // CHECK: 4

    // Substring longer than string
    std::print(stringLastIndexOf("hi", "hello")); // CHECK: -1

    // Exact match
    std::print(stringLastIndexOf("test", "test")); // CHECK: 0

    // Case sensitive
    std::print(stringLastIndexOf("Hello World Hello", "hello")); // CHECK: -1

    // Multiple occurrences (should return last)
    std::print(stringLastIndexOf("ababab", "ab")); // CHECK: 4

    // Single character search (multiple occurrences)
    std::print(stringLastIndexOf("abcabc", "c")); // CHECK: 5

    // Single character not found
    std::print(stringLastIndexOf("abcdef", "z")); // CHECK: -1

    // Empty string search
    std::print(stringLastIndexOf("", "test")); // CHECK: -1

    // Empty string with empty substring
    std::print(stringLastIndexOf("", "")); // CHECK: 0

    // Substring at the end
    std::print(stringLastIndexOf("hello world", "ld")); // CHECK: 9

    // Overlapping pattern (should find last valid match)
    std::print(stringLastIndexOf("aaaaaa", "aa")); // CHECK: 4

    // Additstdnal comprehensive test cases
    std::print(stringLastIndexOf("banana banana", "banana")); // CHECK: 7

    std::print(stringLastIndexOf("test test test", "test")); // CHECK: 10

    std::print(stringLastIndexOf("abcabcabc", "abc")); // CHECK: 6

    std::print(stringLastIndexOf("programming programming", "gram")); // CHECK: 15

    std::print(stringLastIndexOf("123123123", "123")); // CHECK: 6

    std::print(stringLastIndexOf("special!@#special!@#", "!@#")); // CHECK: 17

    std::print(stringLastIndexOf("a_b_c_a_b_c", "_b_")); // CHECK: 7

    std::print(stringLastIndexOf("findlastfindlast", "last")); // CHECK: 12

    std::print(stringLastIndexOf("endendendend", "end")); // CHECK: 9

    std::print(stringLastIndexOf("single", "single")); // CHECK: 0

    std::print(stringLastIndexOf("pattern pattern pattern", " ")); // CHECK: 15

    std::print(stringLastIndexOf("repeatedpattern", "pattern")); // CHECK: 8
}

func test_stringSlice() -> Void {
    // Basic slice operatstdn
    std::print(stringSlice("hello world", 0, 5)); // CHECK: hello

    // Slice from middle
    std::print(stringSlice("hello world", 6, 5)); // CHECK: world

    // Slice with length longer than remaining string
    std::print(stringSlice("hello world", 6, 100)); // CHECK: world

    // Slice single character
    std::print(stringSlice("hello", 1, 1)); // CHECK: e

    // Slice empty (length 0)
    std::print(stringSlice("hello", 2, 0)); // CHECK: {{^ {0}$}}

    // Slice with negative start (should return empty)
    std::print(stringSlice("hello", -1, 3)); // CHECK: {{^ {0}$}}

    // Slice with negative length (should return empty)
    std::print(stringSlice("hello", 1, -1)); // CHECK: {{^ {0}$}}

    // Slice start beyond string length (should return empty)
    std::print(stringSlice("hello", 10, 5)); // CHECK: {{^ {0}$}}

    // Slice entire string
    std::print(stringSlice("hello", 0, 5)); // CHECK: hello

    // Slice from end
    std::print(stringSlice("hello world", 9, 2)); // CHECK: ld

    // Slice empty string
    std::print(stringSlice("", 0, 5)); // CHECK: {{^ {0}$}}

    // Slice with start at string length (should return empty)
    std::print(stringSlice("hello", 5, 1)); // CHECK: {{^ {0}$}}

    // Additstdnal comprehensive test cases
    std::print(stringSlice("programming", 3, 4)); // CHECK: gram

    std::print(stringSlice("abcdefghijk", 2, 6)); // CHECK: cdefgh

    std::print(stringSlice("123456789", 4, 3)); // CHECK: 567

    std::print(stringSlice("special!@#$%", 7, 4)); // CHECK: !@#$

    std::print(stringSlice("longstringexample", 0, 4)); // CHECK: long

    std::print(stringSlice("slicetest", 5, 4)); // CHECK: test

    std::print(stringSlice("onechar", 3, 1)); // CHECK: c

    std::print(stringSlice("boundary", 7, 1)); // CHECK: y

    std::print(stringSlice("exactlength", 0, 11)); // CHECK: exactlength

    std::print(stringSlice("partial", 2, 3)); // CHECK: rti

    std::print(stringSlice("a", 0, 1)); // CHECK: a

    std::print(stringSlice("endslice", 3, 5)); // CHECK: slice
}

func test_stringCharAt() -> Void {
    // Basic character access
    std::print("hello"[0]); // CHECK: h

    // Access middle character
    std::print("hello"[2]); // CHECK: l

    // Access last character
    std::print("hello"[4]); // CHECK: o

    // Access character with spaces
    std::print("hello world"[5]); // CHECK: {{^ $}}

    // Access number character
    std::print("hello123"[5]); // CHECK: 1

    // Access symbol character
    std::print("hello!@#"[5]); // CHECK: !

    // Single character string
    std::print("a"[0]); // CHECK: a

    // Mixed case access
    std::print("AbCdEf"[1]); // CHECK: b

    // Additstdnal comprehensive test cases
    std::print("programming"[0]); // CHECK: p

    std::print("abcdefghijk"[5]); // CHECK: f

    std::print("123456789"[4]); // CHECK: 5

    std::print("special!@#$%"[7]); // CHECK: !

    std::print("UPPERCASE"[2]); // CHECK: P

    std::print("lowercase"[3]); // CHECK: e

    std::print("MixedCase"[5]); // CHECK: C

    std::print(("tab\ttab"[3] as UInt8) as Int); // CHECK: 9

    std::print(("newline\n"[7] as UInt8) as Int); // CHECK: 10

    std::print("boundary_test"[12]); // CHECK: t

    std::print("first_last"[9]); // CHECK: t
}

func test_stringSubstring() -> Void {
    // Basic substring operatstdn
    std::print(stringSubstring("hello world", 0, 5)); // CHECK: hello

    // Substring from middle
    std::print(stringSubstring("hello world", 6, 11)); // CHECK: world

    // Substring with same start and end (empty)
    std::print(stringSubstring("hello", 2, 2)); // CHECK: {{^ {0}$}}

    // Single character substring
    std::print(stringSubstring("hello", 1, 2)); // CHECK: e

    // Substring from start to middle
    std::print(stringSubstring("hello world", 0, 6)); // CHECK: {{^hello $}}

    // Substring from middle to end
    std::print(stringSubstring("hello world", 5, 11)); // CHECK: {{^ }}world

    // Entire string
    std::print(stringSubstring("hello", 0, 5)); // CHECK: hello

    // Negative start (should return empty)
    std::print(stringSubstring("hello", -1, 3)); // CHECK: {{^ {0}$}}

    // End greater than string length (should return empty)
    std::print(stringSubstring("hello", 1, 10)); // CHECK: {{^ {0}$}}

    // Start greater than end (should return empty)
    std::print(stringSubstring("hello", 3, 1)); // CHECK: {{^ {0}$}}

    // Empty string
    std::print(stringSubstring("", 0, 0)); // CHECK: {{^ {0}$}}

    // Start at string length (should return empty)
    std::print(stringSubstring("hello", 5, 5)); // CHECK: {{^ {0}$}}

    // Numbers and symbols
    std::print(stringSubstring("abc123!@#", 3, 6)); // CHECK: 123

    // Additstdnal comprehensive test cases
    std::print(stringSubstring("programming", 3, 7)); // CHECK: gram

    std::print(stringSubstring("abcdefghijk", 2, 8)); // CHECK: cdefgh

    std::print(stringSubstring("123456789", 4, 7)); // CHECK: 567

    std::print(stringSubstring("special!@#$%", 7, 11)); // CHECK: !@#$

    std::print(stringSubstring("longstringexample", 0, 4)); // CHECK: long

    std::print(stringSubstring("substring_test", 10, 14)); // CHECK: test

    std::print(stringSubstring("boundary", 7, 8)); // CHECK: y

    std::print(stringSubstring("exactlength", 0, 11)); // CHECK: exactlength

    std::print(stringSubstring("partial", 2, 5)); // CHECK: rti

    std::print(stringSubstring("a", 0, 1)); // CHECK: a

    std::print(stringSubstring("endsubstring", 3, 12)); // CHECK: substring

    std::print(stringSubstring("middle_part", 7, 11)); // CHECK: part
}

func test_stringCompare() -> Void {
    // Equal strings
    std::print(stringCompare("hello", "hello")); // CHECK: 0

    // First string lexicographically smaller
    std::print(stringCompare("apple", "banana") < 0); // CHECK: true

    // First string lexicographically larger
    std::print(0 < stringCompare("zebra", "apple")); // CHECK: true

    // Case sensitivity (uppercase comes before lowercase in ASCII)
    std::print(stringCompare("Apple", "apple") < 0); // CHECK: true

    // Different lengths, first is prefix
    std::print(stringCompare("hello", "hello world") < 0); // CHECK: true

    // Different lengths, second is prefix
    std::print(0 < stringCompare("hello world", "hello")); // CHECK: true

    // Empty strings
    std::print(stringCompare("", "")); // CHECK: 0

    // Empty vs non-empty
    std::print(stringCompare("", "hello") < 0); // CHECK: true

    // Non-empty vs empty
    std::print(0 < stringCompare("hello", "")); // CHECK: true

    // Single character comparison
    std::print(stringCompare("a", "b") < 0); // CHECK: true

    // Numbers in strings
    std::print(stringCompare("abc1", "abc2") < 0); // CHECK: true

    // Symbols comparison
    std::print(stringCompare("test!", "test@") < 0); // CHECK: true

    // Additstdnal comprehensive test cases
    std::print(stringCompare("abc", "abd") < 0); // CHECK: true

    std::print(0 < stringCompare("longer", "long")); // CHECK: true

    std::print(stringCompare("same", "same")); // CHECK: 0

    std::print(stringCompare("TEST", "test") < 0); // CHECK: true

    std::print(stringCompare("123", "124") < 0); // CHECK: true

    std::print(stringCompare("special!", "special@") < 0); // CHECK: true

    std::print(stringCompare("prefix", "prefixlong") < 0); // CHECK: true

    std::print(0 < stringCompare("z", "a")); // CHECK: true

    std::print(stringCompare("equal_test", "equal_test")); // CHECK: 0
}

func test_stringToInt() -> Void {
    // Basic positive number
    std::print(stringToInt("123")); // CHECK: 123

    // Basic negative number
    std::print(stringToInt("-456")); // CHECK: -456

    // Zero
    std::print(stringToInt("0")); // CHECK: 0

    // Negative zero
    std::print(stringToInt("-0")); // CHECK: 0

    // Positive sign
    std::print(stringToInt("+789")); // CHECK: 789

    // Single digit
    std::print(stringToInt("5")); // CHECK: 5

    // Single negative digit
    std::print(stringToInt("-7")); // CHECK: -7

    // Leading whitespace
    std::print(stringToInt("  42")); // CHECK: 42

    // Leading whitespace with negative
    std::print(stringToInt("  -99")); // CHECK: -99

    // Leading and trailing non-digits (should stop at first non-digit)
    std::print(stringToInt("123abc")); // CHECK: 123

    // Leading letters (should return 0)
    std::print(stringToInt("abc123")); // CHECK: 0

    // Empty string
    std::print(stringToInt("")); // CHECK: 0

    // Only whitespace
    std::print(stringToInt("   ")); // CHECK: 0

    // Only sign
    std::print(stringToInt("-")); // CHECK: 0

    // Only positive sign
    std::print(stringToInt("+")); // CHECK: 0

    // Mixed with spaces and symbols
    std::print(stringToInt(" +123!@#")); // CHECK: 123

    // Additstdnal edge cases
    std::print(stringToInt("2147483647")); // CHECK: 2147483647

    std::print(stringToInt("-2147483647")); // CHECK: -2147483647

    std::print(stringToInt("  \t\n  42  ")); // CHECK: 42

    std::print(stringToInt("0000123")); // CHECK: 123

    std::print(stringToInt("-0")); // CHECK: 0
}

func main() -> Int {
    std::print("=== Testing intToString ===");
    test_intToString();

    std::print("=== Testing stringReplace ===");
    test_stringReplace();

    std::print("=== Testing stringTrim ===");
    test_stringTrim();

    std::print("=== Testing stringToUpper ===");
    test_stringToUpper();

    std::print("=== Testing stringToLower ===");
    test_stringToLower();

    std::print("=== Testing stringReverse ===");
    test_stringReverse();

    std::print("=== Testing stringContains ===");
    test_stringContains();

    std::print("=== Testing stringIndexOf ===");
    test_stringIndexOf();

    std::print("=== Testing stringLastIndexOf ===");
    test_stringLastIndexOf();

    std::print("=== Testing stringSlice ===");
    test_stringSlice();

    std::print("=== Testing string indexing operator [] ===");
    test_stringCharAt();

    std::print("=== Testing stringSubstring ===");
    test_stringSubstring();

    std::print("=== Testing stringCompare ===");
    test_stringCompare();

    std::print("=== Testing stringToInt ===");
    test_stringToInt();

    return 0;
}

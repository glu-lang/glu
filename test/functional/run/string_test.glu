//
// RUN: gluc %s -o %t && %t | FileCheck -v %s
//

import io;
import string::*;

func test_intToString() -> Void {
    var aStr: String = intToString(1);
    var bStr: String = intToString(-1);

    var cStr: String = intToString(13);
    var dStr: String = intToString(-13);

    var eStr: String = intToString(123);
    var fStr: String = intToString(-456);

    var gStr: String = intToString(0);

    io::printLine(aStr); // CHECK: 1
    io::printLine(bStr); // CHECK: -1

    io::printLine(cStr); // CHECK: 13
    io::printLine(dStr); // CHECK: -13

    io::printLine(eStr); // CHECK: 123
    io::printLine(fStr); // CHECK: -456

    io::printLine(gStr); // CHECK: 0
}

func test_stringReplace() -> Void {
    // Basic replacement
    var str1: String = "Hello World";
    var result1: String = stringReplace(str1, "World", "GLU");
    io::printLine(result1);

    // Multiple replacements
    var str2: String = "aaa";
    var result2: String = stringReplace(str2, "a", "bb");
    io::printLine(result2); // CHECK: bbbbbb

    // No match
    var str3: String = "test";
    var result3: String = stringReplace(str3, "xyz", "abc");
    io::printLine(result3); // CHECK: test

    // Replace with empty string
    var str4: String = "Hello World";
    var result4: String = stringReplace(str4, " World", "");
    io::printLine(result4); // CHECK: Hello

    // Replace empty string (should return original)
    var str5: String = "test";
    var result5: String = stringReplace(str5, "", "abc");
    io::printLine(result5); // CHECK: test

    // Replace entire string
    var str6: String = "old";
    var result6: String = stringReplace(str6, "old", "new");
    io::printLine(result6); // CHECK: new

    // Overlapping patterns
    var str7: String = "ababab";
    var result7: String = stringReplace(str7, "ab", "x");
    io::printLine(result7); // CHECK: xxx
}

func test_stringTrim() -> Void {
    // Basic whitespace trimming
    var str1: String = "  hello world  ";
    var result1: String = stringTrim(str1);
    io::printLine(result1); // CHECK: hello world

    // Only leading whitespace
    var str2: String = "   test";
    var result2: String = stringTrim(str2);
    io::printLine(result2); // CHECK: test

    // Only trailing whitespace
    var str3: String = "test   ";
    var result3: String = stringTrim(str3);
    io::printLine(result3); // CHECK: test

    // No whitespace to trim
    var str4: String = "nowhitespace";
    var result4: String = stringTrim(str4);
    io::printLine(result4); // CHECK: nowhitespace

    // Only whitespace
    var str5: String = "   ";
    var result5: String = stringTrim(str5);
    io::printLine(result5); // CHECK: {{^ {0}$}}

    // Empty string
    var str6: String = "";
    var result6: String = stringTrim(str6);
    io::printLine(result6); // CHECK: {{^ {0}$}}

    // Single character with whitespace
    var str7: String = " a ";
    var result7: String = stringTrim(str7);
    io::printLine(result7); // CHECK: a
}

func test_stringToUpper() -> Void {
    // Basic lowercase to uppercase
    var str1: String = "hello world";
    var result1: String = stringToUpper(str1);
    io::printLine(result1); // CHECK: HELLO WORLD

    // Mixed case
    var str2: String = "Hello World";
    var result2: String = stringToUpper(str2);
    io::printLine(result2); // CHECK: HELLO WORLD

    // Already uppercase
    var str3: String = "ALREADY UPPER";
    var result3: String = stringToUpper(str3);
    io::printLine(result3); // CHECK: ALREADY UPPER

    // Numbers and symbols (should remain unchanged)
    var str4: String = "hello123!@#";
    var result4: String = stringToUpper(str4);
    io::printLine(result4); // CHECK: HELLO123!@#

    // Empty string
    var str5: String = "";
    var result5: String = stringToUpper(str5);
    io::printLine(result5); // CHECK: {{^ {0}$}}

    // Single character lowercase
    var str6: String = "a";
    var result6: String = stringToUpper(str6);
    io::printLine(result6); // CHECK: A

    // Single character uppercase
    var str7: String = "Z";
    var result7: String = stringToUpper(str7);
    io::printLine(result7); // CHECK: Z

    // Only numbers
    var str8: String = "12345";
    var result8: String = stringToUpper(str8);
    io::printLine(result8); // CHECK: 12345
}

func test_stringToLower() -> Void {
    // Basic uppercase to lowercase
    var str1: String = "HELLO WORLD";
    var result1: String = stringToLower(str1);
    io::printLine(result1); // CHECK: hello world

    // Mixed case
    var str2: String = "Hello World";
    var result2: String = stringToLower(str2);
    io::printLine(result2); // CHECK: hello world

    // Already lowercase
    var str3: String = "already lower";
    var result3: String = stringToLower(str3);
    io::printLine(result3); // CHECK: already lower

    // Numbers and symbols (should remain unchanged)
    var str4: String = "HELLO123!@#";
    var result4: String = stringToLower(str4);
    io::printLine(result4); // CHECK: hello123!@#

    // Empty string
    var str5: String = "";
    var result5: String = stringToLower(str5);
    io::printLine(result5); // CHECK: {{^ {0}$}}

    // Single character uppercase
    var str6: String = "A";
    var result6: String = stringToLower(str6);
    io::printLine(result6); // CHECK: a

    // Single character lowercase
    var str7: String = "z";
    var result7: String = stringToLower(str7);
    io::printLine(result7); // CHECK: z

    // Only numbers
    var str8: String = "12345";
    var result8: String = stringToLower(str8);
    io::printLine(result8); // CHECK: 12345
}

func test_stringReverse() -> Void {
    // Basic string reversal
    var str1: String = "hello";
    var result1: String = stringReverse(str1);
    io::printLine(result1); // CHECK: olleh

    // Palindrome
    var str2: String = "racecar";
    var result2: String = stringReverse(str2);
    io::printLine(result2); // CHECK: racecar

    // Empty string
    var str3: String = "";
    var result3: String = stringReverse(str3);
    io::printLine(result3); // CHECK: {{^ {0}$}}

    // Single character
    var str4: String = "a";
    var result4: String = stringReverse(str4);
    io::printLine(result4); // CHECK: a

    // Numbers and symbols
    var str5: String = "123!@#";
    var result5: String = stringReverse(str5);
    io::printLine(result5); // CHECK: #@!321

    // Words with spaces
    var str6: String = "hello world";
    var result6: String = stringReverse(str6);
    io::printLine(result6); // CHECK: dlrow olleh

    // Mixed case
    var str7: String = "AbCdEf";
    var result7: String = stringReverse(str7);
    io::printLine(result7); // CHECK: fEdCbA

    // Long string
    var str8: String = "abcdefghijklmnop";
    var result8: String = stringReverse(str8);
    io::printLine(result8); // CHECK: ponmlkjihgfedcba
}

func test_stringContains() -> Void {
    // Basic substring search
    var str1: String = "hello world";
    var result1: Bool = stringContains(str1, "world");
    io::printLine(result1); // CHECK: true

    // Substring not found
    var str2: String = "hello world";
    var result2: Bool = stringContains(str2, "xyz");
    io::printLine(result2); // CHECK: false

    // Empty substring (should return true)
    var str3: String = "test";
    var result3: Bool = stringContains(str3, "");
    io::printLine(result3); // CHECK: true

    // Substring longer than string
    var str4: String = "hi";
    var result4: Bool = stringContains(str4, "hello");
    io::printLine(result4); // CHECK: false

    // Exact match
    var str5: String = "test";
    var result5: Bool = stringContains(str5, "test");
    io::printLine(result5); // CHECK: true

    // Case sensitive
    var str6: String = "Hello World";
    var result6: Bool = stringContains(str6, "hello");
    io::printLine(result6); // CHECK: false

    // Multiple occurrences
    var str7: String = "ababab";
    var result7: Bool = stringContains(str7, "ab");
    io::printLine(result7); // CHECK: true

    // Single character search
    var str8: String = "abcdef";
    var result8: Bool = stringContains(str8, "c");
    io::printLine(result8); // CHECK: true

    // Single character not found
    var str9: String = "abcdef";
    var result9: Bool = stringContains(str9, "z");
    io::printLine(result9); // CHECK: false

    // Empty string search
    var str10: String = "";
    var result10: Bool = stringContains(str10, "test");
    io::printLine(result10); // CHECK: false

    // Empty string with empty substring
    var str11: String = "";
    var result11: Bool = stringContains(str11, "");
    io::printLine(result11); // CHECK: true
}

func main() -> Int {
    io::printLine("=== Testing intToString ===");
    test_intToString();

    io::printLine("=== Testing stringReplace ===");
    test_stringReplace();

    io::printLine("=== Testing stringTrim ===");
    test_stringTrim();

    io::printLine("=== Testing stringToUpper ===");
    test_stringToUpper();

    io::printLine("=== Testing stringToLower ===");
    test_stringToLower();

    io::printLine("=== Testing stringReverse ===");
    test_stringReverse();

    io::printLine("=== Testing stringContains ===");
    test_stringContains();

    return 0;
}
// cmake --build build -j8 && build/tools/gluc/gluc /Users/yunse/Development/epitech/glu/test/functional/run/string.glu -c -o file.o && clang -o a.out file.o build/tools/lib/glu/defaultImports/defaultImports.o build/tools/lib/glu/defaultImports/operators.o build/tools/lib/glu/defaultImports/stringType.o build/tools/lib/glu/io.o build/tools/lib/glu/file.o build/tools/lib/glu/allocation.o build/tools/lib/glu/string.o && ./a.out

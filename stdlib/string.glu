import allocation::allocate;
import io;

@no_mangling func strlen(s: *Char) -> Int;
@no_mangling func strcat(destination: *Char, source: *Char) -> *Char;
@no_mangling func memcpy(dst: *Char, src: *Char, n: Int) -> *Char;

func createStringFromPointer(s: *Char) -> String {
    var str: String;

    str.data = s;
    str.length = strlen(s);
    str.isAllocated = false;

    return str;
}

public func stringLength(s: String) -> Int {
    return s.length;
}

public func +(lhs: String, rhs: String) -> String {
    var result: String;

    result.data = allocate(lhs.length + rhs.length);

    memcpy(result.data, lhs.data, lhs.length);
    memcpy(&result.data[lhs.length as UInt64], rhs.data, rhs.length);

    result.length = lhs.length + rhs.length;
    result.isAllocated = true;
    return result;
}

// stringIsEmpty(str) → 길이 0 여부
public func stringIsEmpty(s: String) -> Bool {
    return s.length == 0;
}
// ==
public func ==(lhs: String, rhs: String) -> Bool {
    if (lhs.length != rhs.length) {
        return false;
    }
    var i: Int = 0;
    while (i < lhs.length) {
        // (lhs.data as UInt8) + 1;
        // if (*(lhs.data + (i as UInt64)) != *(rhs.data + (i as UInt64))) {
        //     return false;
        // }
        i = i + 1;
    }
    return true;
}

// stringCompare(a, b) → 사전순 비교 (음수, 0, 양수 반환)

// stringCharAt(str, index) → 특정 인덱스 문자 가져오기
// stringSubstring(str, start, end) → 구간 잘라내기
// stringSlice(str, start, length) → 길이 기반 잘라내기

// stringIndexOf(str, substr) → 부분 문자열 첫 위치
// stringLastIndexOf(str, substr) → 마지막 위치
// stringContains(str, substr) → 포함 여부

// String reverse
// stringToUpper(str) / stringToLower(str)
// stringTrim(str) → 앞뒤 공백 제거
// stringReplace(str, from, to)

// stringToInt(str) / stringToFloat(str)
// intToString(num) / floatToString(num)
public func intToString(n: Int) -> String {
    var str: String;
    var num: Int = n;
    var isNegative: Bool = n < 0;

    if (isNegative) {
        num = -n;
    }

    // Special case: 0
    if (n == 0) {
        str.data = allocate(1);
        str.data[0] = "0";
        str.length = 1;
        str.isAllocated = true;
        return str;
    }

    // Calculate number of digits
    var nLength: Int = 0;
    var temp: Int = num;
    while (temp > 0) {
        nLength = nLength + 1;
        temp = temp / 10;
    }


    // Allocate memory
    var totalLength: Int = nLength;
    if (isNegative) {
        totalLength = totalLength + 1;
    }
    str.data = allocate(totalLength);
    str.length = totalLength;
    str.isAllocated = true;

    // Add negative sign
    if (isNegative) {
        str.data[0] = "-";
    }

    // Fill digits from right to left
    var i = 0;
    while (i < nLength) {
        str.data[(totalLength - i - 1) as UInt64] = ((num % 10 + 48) as UInt8) as Char;
        num = num / 10;
        i = i + 1;
    }

    return str;
}

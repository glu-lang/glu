{
  "name": "Glu",
  "scopeName": "source.glu",
  "patterns": [
    { "include": "#preprocessor" },
    { "include": "#comments" },
    { "include": "#attributes" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#keywords" },
    { "include": "#functions" },
    { "include": "#operators" },
    { "include": "#types" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.glu",
          "begin": "^\\s*#\\s*(define|undef|if|ifdef|ifndef|else|elif|endif|include)",
          "end": "(?<!\\\\)$",
          "beginCaptures": {
            "1": { "name": "keyword.control.directive.glu" }
          },
          "patterns": [
            { "include": "#comments" },
            {
              "name": "constant.character.escape.line-continuation.glu",
              "match": "\\\\$"
            }
          ]
        }
      ]
    },
    "attributes": {
      "patterns": [
        {
          "name": "meta.attribute.glu",
          "match": "@\\w+",
          "captures": {
            "0": { "name": "storage.modifier.attribute.glu" }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.glu",
          "match": "//.*$"
        },
        {
          "name": "comment.block.glu",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [{ "include": "#comments" }]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.glu",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "name": "constant.character.escape.glu", "match": "\\\\." }
          ]
        },
        {
          "name": "string.quoted.single.glu",
          "begin": "'",
          "end": "'",
          "patterns": [
            { "name": "constant.character.escape.glu", "match": "\\\\." }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.glu",
          "match": "\\b0[xX][0-9A-Fa-f](_?[0-9A-Fa-f])*\\b"
        },
        {
          "name": "constant.numeric.binary.glu",
          "match": "\\b0[bB][01](_?[01])*\\b"
        },
        {
          "name": "constant.numeric.octal.glu",
          "match": "\\b0[oO][0-7](_?[0-7])*\\b"
        },
        {
          "name": "constant.numeric.float.glu",
          "match": "\\b\\d(_?\\d)*\\.\\d(_?\\d)*([eE][+-]?\\d(_?\\d)*)?\\b"
        },
        {
          "name": "constant.numeric.decimal.glu",
          "match": "\\b\\d(_?\\d)*([eE][+-]?\\d(_?\\d)*)?\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.glu",
          "match": "\\b(?:if|else|while|for|return|break|continue|in)\\b"
        },
        {
          "name": "storage.type.glu",
          "match": "\\b(?:let|var|func|struct|union|enum|typealias)\\b"
        },
        {
          "name": "keyword.other.glu",
          "match": "\\b(?:import|as)\\b"
        },
        {
          "name": "storage.modifier.glu",
          "match": "\\b(?:public|private|unique|shared)\\b"
        },
        {
          "name": "constant.language.glu",
          "match": "\\b(?:true|false|null)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.call.glu",
          "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": { "name": "entity.name.function.glu" }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.glu",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical.glu",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.bitwise.glu",
          "match": "&|\\||\\^|~|<<|>>"
        },
        {
          "name": "keyword.operator.arithmetic.glu",
          "match": "\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.range.glu",
          "match": "\\.\\.\\.|\\.\\.<"
        },
        {
          "name": "keyword.operator.pointer.glu",
          "match": "\\.\\*"
        },
        {
          "name": "keyword.operator.assignment.glu",
          "match": "="
        },
        {
          "name": "keyword.operator.scope.glu",
          "match": "::|::<"
        },
        {
          "name": "keyword.operator.arrow.glu",
          "match": "->"
        },
        {
          "name": "punctuation.accessor.glu",
          "match": "\\."
        },
        {
          "name": "punctuation.separator.glu",
          "match": ",|;|:"
        },
        {
          "name": "keyword.operator.ternary.glu",
          "match": "\\?"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.glu",
          "match": "\\b(?:Int|Int8|Int16|Int32|Int64|UInt8|UInt16|UInt32|UInt64|Float16|Float32|Float64|Char|String|Bool|Void)\\b"
        },
        {
          "name": "entity.name.type.glu",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.glu",
          "match": "\\b[a-z_][A-Za-z0-9_]*\\b"
        }
      ]
    }
  }
}

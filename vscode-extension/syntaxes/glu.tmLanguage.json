{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Glu",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.glu",
          "match": "//.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.glu",
          "match": "\\b(if|else|while|for|return|break|continue|import|as|in)\\b"
        },
        {
          "name": "keyword.declaration.glu",
          "match": "\\b(func|struct|enum|let|var|type)\\b"
        },
        {
          "name": "constant.language.glu",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type.primitive.glu",
          "match": "\\b(Int|Float|Bool|String|Char|Void)\\b"
        },
        {
          "name": "entity.name.type.glu",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.glu",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.glu",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.glu",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.glu",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.glu",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.glu",
          "match": "\\b[0-9]+\\b"
        },
        {
          "name": "constant.numeric.float.glu",
          "match": "\\b[0-9]+\\.[0-9]+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.glu",
          "match": "="
        },
        {
          "name": "keyword.operator.comparison.glu",
          "match": "(==|!=|<|>|<=|>=)"
        },
        {
          "name": "keyword.operator.logical.glu",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.arithmetic.glu",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "punctuation.separator.glu",
          "match": "[,:;]"
        },
        {
          "name": "punctuation.brackets.glu",
          "match": "[\\[\\]{}()]"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.glu",
          "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  },
  "scopeName": "source.glu"
}